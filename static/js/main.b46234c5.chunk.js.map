{"version":3,"sources":["Button.js","App.js","logo.svg","serviceWorker.js","index.js"],"names":["operateButton","props","className","onClick","buttonFunction","element","App","state","text","ans","handleButton","btn","console","log","handleEqual","handleAc","handleClear","length","includes","slice","setState","eval","str","substring","addDecimal","indexOf","this","map","React","Component","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uGAAA,0BAOeA,IAJf,SAAuBC,GACrB,OAAO,yBAAKC,UAAU,UAAUC,QAASF,EAAMG,gBAAiBH,EAAMI,W,+0CCAlEC,I,gwBACJC,MAAQ,CAAEC,KAAM,GAAIC,IAAK,I,MAEzBC,aAAe,SAACC,GACdC,QAAQC,IAAIF,EAAK,cAEL,MAARA,EACF,MAAKG,cACY,OAARH,EACT,MAAKI,WACY,UAARJ,EACT,MAAKK,cAEsB,IAA3B,MAAKT,MAAMC,KAAKS,QAChB,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKC,SAASP,GAEnCC,QAAQC,IAAI,OAGV,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKK,SAAS,MAAKX,MAAMC,KAAKW,OAAO,KAC1D,CAAC,IAAK,IAAK,IAAK,IAAK,KAAKD,SAASP,IAGnC,MAAKS,SAAS,CAAEZ,KAAM,MAAKD,MAAMC,KAAOG,K,MAK9CG,YAAc,WACZ,IACE,MAAKM,SAAS,CAAEX,IAAKY,KAAK,MAAKd,MAAMC,QACrC,eACA,MAAKY,SAAS,CAAEX,IAAK,Y,MAGzBM,SAAW,WACT,MAAKK,SAAS,CAAEZ,KAAM,GAAIC,IAAK,O,MAEjCO,YAAc,WACZ,IAAIM,EAAM,MAAKf,MAAMC,KACrBc,EAAMA,EAAIC,UAAU,EAAGD,EAAIL,OAAS,GACpC,MAAKG,SAAS,CAAEZ,KAAMc,EAAKb,IAAK,M,MAElCe,WAAa,SAACvB,IAC0B,IAAlC,MAAKM,MAAMC,KAAKiB,QAAQ,MAC1B,MAAKL,SAAS,CAAEZ,KAAM,MAAKD,MAAMC,KAAOP,K,wNAIlC,IAAD,OACP,OACE,kEAAKC,UAAU,WACb,kEAAKA,UAAU,OACb,kEAAKA,UAAU,WACb,kEAAKA,UAAU,YAAYwB,KAAKnB,MAAMC,MACtC,kEAAKN,UAAU,YAAYwB,KAAKnB,MAAME,MAGxC,kEAAKP,UAAU,YACZ,CAAC,KAAM,QAAS,IAAK,KAAKyB,KAAI,SAAC1B,GAAD,OAC7B,2DAAC,0CAAD,CACEG,eAAgB,kBAAM,EAAKM,aAAaT,IACxCI,QAASJ,QAKf,kEAAKC,UAAU,YACZ,CAAC,EAAG,EAAG,EAAG,KAAKyB,KAAI,SAAC1B,GAAD,OAClB,2DAAC,0CAAD,CACEG,eAAgB,kBAAM,EAAKM,aAAaT,IACxCI,QAASJ,QAIf,kEAAKC,UAAU,YACZ,CAAC,EAAG,EAAG,EAAG,KAAKyB,KAAI,SAAC1B,GAAD,OAClB,2DAAC,0CAAD,CACEG,eAAgB,kBAAM,EAAKM,aAAaT,IACxCI,QAASJ,QAIf,kEAAKC,UAAU,YACZ,CAAC,EAAG,EAAG,EAAG,KAAKyB,KAAI,SAAC1B,GAAD,OAClB,2DAAC,0CAAD,CACEG,eAAgB,kBAAM,EAAKM,aAAaT,IACxCI,QAASJ,QAIf,kEAAKC,UAAU,YACZ,CAAC,IAAK,EAAG,KAAM,KAAKyB,KAAI,SAAC1B,GAAD,OACvB,2DAAC,0CAAD,CACEG,eAAgB,kBAAM,EAAKM,aAAaT,IACxCI,QAASJ,c,KA/FP2B,6CAAMC,WAyGTvB,2B,2EC7GfwB,EAAOC,QAAU,IAA0B,kC,2HCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACjC,EAAA,EAAD,OAEFkC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.b46234c5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nfunction operateButton(props) {\r\n  return <div className=\"Button2\" onClick={props.buttonFunction}>{props.element}</div>;\r\n}\r\n\r\nexport default operateButton;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport KeyButton from \"./Button.js\";\nclass App extends React.Component {\n  state = { text: \"\", ans: \"\" };\n\n  handleButton = (btn) => {\n    console.log(btn, \"handle btn\");\n\n    if (btn === \"=\") {\n      this.handleEqual();\n    } else if (btn === \"Ac\") {\n      this.handleAc();\n    } else if (btn === \"clear\") {\n      this.handleClear();\n    } else if (\n      this.state.text.length === 0 &&\n      [\"+\", \"-\", \"*\", \"%\", \"/\"].includes(btn)\n    ) {\n      console.log(\"if1\");\n    } else {\n      if (\n        [\"+\", \"-\", \"*\", \"%\", \"/\"].includes(this.state.text.slice(-1)) &&\n        [\"+\", \"-\", \"*\", \"%\", \"/\"].includes(btn)\n      ) {\n      } else {\n        this.setState({ text: this.state.text + btn });\n      }\n    }\n  };\n\n  handleEqual = () => {\n    try {\n      this.setState({ ans: eval(this.state.text) });\n    } catch {\n      this.setState({ ans: \"ERROR\" });\n    }\n  };\n  handleAc = () => {\n    this.setState({ text: \"\", ans: \" \" });\n  };\n  handleClear = () => {\n    let str = this.state.text;\n    str = str.substring(0, str.length - 1);\n    this.setState({ text: str, ans: \"\" });\n  };\n  addDecimal = (props) => {\n    if (this.state.text.indexOf(\".\") === -1) {\n      this.setState({ text: this.state.text + props });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"mainBox\">\n        <div className=\"box\">\n          <div className=\"display\">\n            <div className=\"display1\">{this.state.text}</div>\n            <div className=\"display2\">{this.state.ans}</div>\n          </div>\n\n          <div className=\"keyboard\">\n            {[\"Ac\", \"clear\", \"%\", \"/\"].map((props) => (\n              <KeyButton\n                buttonFunction={() => this.handleButton(props)}\n                element={props}\n              />\n            ))}\n          </div>\n\n          <div className=\"keyboard\">\n            {[7, 8, 9, \"*\"].map((props) => (\n              <KeyButton\n                buttonFunction={() => this.handleButton(props)}\n                element={props}\n              />\n            ))}\n          </div>\n          <div className=\"keyboard\">\n            {[4, 5, 6, \"-\"].map((props) => (\n              <KeyButton\n                buttonFunction={() => this.handleButton(props)}\n                element={props}\n              />\n            ))}\n          </div>\n          <div className=\"keyboard\">\n            {[1, 2, 3, \"+\"].map((props) => (\n              <KeyButton\n                buttonFunction={() => this.handleButton(props)}\n                element={props}\n              />\n            ))}\n          </div>\n          <div className=\"keyboard\">\n            {[\".\", 0, \"00\", \"=\"].map((props) => (\n              <KeyButton\n                buttonFunction={() => this.handleButton(props)}\n                element={props}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n{\n  /* /* () => {\n   return this.handleEqual(\"=\")\n}\naddDecimal = (props) => {\n  if (this.state.text.indexOf(\".\") === -1) {\n    this.setState({ text: this.state.text + props });\n    } */\n}\n\n{\n  /* /////////////////// */\n}\n\n{\n  /* <div className=\"keyboard\"> \n            <div className=\"button1\" onClick={this.handleAc}>\n              AC\n            </div>\n            <div className=\"button1\" onClick={this.handleClear}>\n              clear\n            </div>\n            <div className=\"button1\" onClick={() => this.handleButton(\"%\")}>\n              %\n            </div>\n            <div className=\"button1\" onClick={() => this.handleButton(\"/\")}>\n              /\n            </div>\n          </div>\n          <div className=\"keyboard\">\n            <div className=\"button\" onClick={() => this.handleButton(7)}>\n              7\n            </div>\n            <div className=\"button\" onClick={() => this.handleButton(8)}>\n              8\n            </div>\n            <div className=\"button\" onClick={() => this.handleButton(9)}>\n              9\n            </div>\n            <div className=\"button1\" onClick={() => this.handleButton(\"*\")}>\n              *\n            </div>\n          </div>\n          <div className=\"keyboard\">\n            <div className=\"button\" onClick={() => this.handleButton(4)}>\n              4\n            </div>\n            <div className=\"button\" onClick={() => this.handleButton(5)}>\n              5\n            </div>\n            <div className=\"button\" onClick={() => this.handleButton(6)}>\n              6\n            </div>\n            <div className=\"button1\" onClick={() => this.handleButton(\"-\")}>\n              -\n            </div>\n          </div>\n          <div className=\"keyboard\">\n            <div className=\"button\" onClick={() => this.handleButton(1)}>\n              1\n            </div>\n            <div className=\"button\" onClick={() => this.handleButton(2)}>\n              2\n            </div>\n\n            <div className=\"button\" onClick={() => this.handleButton(3)}>\n              3\n            </div>\n            <div className=\"button1\" onClick={() => this.handleButton(\"+\")}>\n              +\n            </div>\n          </div>\n          <div className=\"keyboard\">\n            <div className=\"button\" onClick={() => this.handleButton(\".\")}>\n              .\n            </div>\n            <div className=\"button\" onClick={() => this.handleButton(0)}>\n              0\n            </div>\n            <div className=\"button\" onClick={() => this.handleButton(\"00\")}>\n              00\n            </div>\n            <div className=\"button1\" onClick={this.handleEqual}>\n              =\n            </div>\n         </div>*/\n}\n\n{\n  /* //////////////////////////////////////////////////////////////////// */\n}\n\n{\n  /* <div className = \"keyboard\"> \n             <KeyButton\n              buttonFunction={() => this.handleButton(7)}\n              element=\"7\"\n            />\n            <KeyButton\n              buttonFunction={() => this.handleButton(8)}\n              element=\"8\"\n            />\n            <KeyButton\n              buttonFunction={() => this.handleButton(9)}\n              element=\"9\"\n            />\n            <KeyButton\n              buttonFunction={() => this.handleButton(\"*\")}\n              element=\"*\"\n            /> \n          </div>*/\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}