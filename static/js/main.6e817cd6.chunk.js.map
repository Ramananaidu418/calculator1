{"version":3,"sources":["Components/Button/Button.js","App.js","Components/Keyboard/Keyboard.js","logo.svg","serviceWorker.js","index.js"],"names":["OperateButton","props","className","onClick","keyboardClicked","element","App","state","text","ans","handleButton","btn","console","log","handleEqual","handleAc","handleClear","length","includes","slice","setState","per","eval","str","substring","this","map","buttonFunction","React","Component","numberPad","row","col","key","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uGAAA,0BAOeA,IAJf,SAAuBC,GACrB,OAAO,yBAAKC,UAAU,SAASC,QAASF,EAAMG,iBAAiB,2BAAIH,EAAMI,Y,g7CCGrEC,I,gwBACJC,MAAQ,CAAEC,KAAM,GAAIC,IAAK,I,MAExBC,aAAe,SAACC,GACfC,QAAQC,IAAIF,EAAK,cACjB,MAAKG,cAGO,MAARH,EACF,MAAKG,cACY,OAARH,EACT,MAAKI,WACY,UAARJ,EACT,MAAKK,cAEsB,IAA3B,MAAKT,MAAMC,KAAKS,QAChB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAI,KAAKC,SAASP,IAIrC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAI,KAAKO,SAAS,MAAKX,MAAMC,KAAKW,OAAO,KAC9D,CAAC,IAAK,IAAK,IAAK,IAAK,IAAI,KAAKD,SAASP,KAGvC,MAAKS,SAAS,CAAEZ,KAAM,MAAKD,MAAMC,KAAOG,IACxC,MAAKG,YAAY,MAAKP,MAAMC,KAAOG,K,MAMzCG,YAAc,SAACO,KACb,IACKA,IACD,MAAKD,SAAS,CAAEX,IAAKa,KAAKD,OAE5B,MAAKD,SAAS,CAAEX,IAAKa,KAAK,MAAKf,MAAMC,QAErC,eACA,MAAKY,SAAS,CAAEX,IAAK,Q,MAGzBM,SAAW,WACT,MAAKK,SAAS,CAAEZ,KAAM,GAAIC,IAAK,O,MAEjCO,YAAc,WACZ,IAAIO,EAAM,MAAKhB,MAAMC,KACrBe,EAAMA,EAAIC,UAAU,EAAGD,EAAIN,OAAS,GACpC,MAAKG,SAAS,CAAEZ,KAAMe,EAAKd,IAAK,M,wNAIxB,IAAD,OACP,OACE,kEAAKP,UAAU,WACb,kEAAKA,UAAU,OACb,kEAAKA,UAAU,WACb,kEAAKA,UAAU,YAAYuB,KAAKlB,MAAMC,MACtC,kEAAKN,UAAU,YAAYuB,KAAKlB,MAAME,MAExC,kEAAKP,UAAU,aACb,kEAAKA,UAAU,iBACZ,CAAC,KAAK,IAAI,IAAI,KAAKwB,KAAI,SAACL,GACvB,OAAM,2DAAC,yDAAD,CAAejB,gBAAiB,kBAAI,EAAKM,aAAaW,IAAMhB,QAASgB,QAG/E,kEAAKnB,UAAU,WACb,kEAAKA,UAAU,UACb,2DAAC,6DAAD,CAAUyB,eAAgBF,KAAKf,gBAEjC,kEAAKR,UAAU,mBACd,CAAC,IAAI,IAAI,IAAI,KAAKwB,KAAI,SAACL,GACtB,OAAM,2DAAC,yDAAD,CAAejB,gBAAiB,kBAAI,EAAKM,aAAaW,IAAMhB,QAASgB,gB,KAxEzEO,6CAAMC,WAoFTvB,2B,+BC3Ff,mCA6BewB,IAzBG,SAAC7B,GAOjB,OACE,yBAAKC,UAAU,UAPP,CACR,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,KAAM,EAAG,MAIHwB,KAAI,SAACK,GACR,OACE,yBAAK7B,UAAU,OACZ6B,EAAIL,KAAI,SAACM,GAAD,OACP,kBAAC,IAAD,CACEC,IAAKD,EACL5B,gBAAiB,kBAAMH,EAAM0B,eAAeK,IAC5C3B,QAAS2B,c,yECpBzBE,EAAOC,QAAU,IAA0B,kC,6ICYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACrC,EAAA,EAAD,OAEFsC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.6e817cd6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nfunction OperateButton(props) {\r\n  return <div className=\"Button\" onClick={props.keyboardClicked}><p>{props.element}</p></div>;\r\n}\r\n\r\nexport default OperateButton;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport KeyButton from \"./Components/Button/Button\";\nimport OperateButton from \"./Components/Button/Button\";\n\nimport Keyboard from \"./Components/Keyboard/Keyboard\";\nclass App extends React.Component {\n  state = { text: \"\", ans: \"\" };\n\n   handleButton = (btn) => {\n    console.log(btn, \"handle btn\");\n    this.handleEqual();\n\n\n    if (btn === \"=\") {\n      this.handleEqual();\n    } else if (btn === \"Ac\") {\n      this.handleAc();\n    } else if (btn === \"clear\") {\n      this.handleClear();\n    } else if (\n      this.state.text.length === 0 &&\n      [\"+\", \"-\", \"*\", \"%\", \"/\",\".\"].includes(btn)\n    ) {\n    } else {\n      if (\n        [\"+\", \"-\", \"*\", \"%\", \"/\",\".\"].includes(this.state.text.slice(-1)) &&\n        [\"+\", \"-\", \"*\", \"%\", \"/\",\".\"].includes(btn)\n      ) {\n      } else {\n        this.setState({ text: this.state.text + btn });\n        this.handleEqual(this.state.text + btn)\n\n      }\n    }\n  };\n\n  handleEqual = (per) => {\n    try {\n      if(per){\n        this.setState({ ans: eval(per) });\n      }else{\n      this.setState({ ans: eval(this.state.text) });\n      }\n    } catch {\n      this.setState({ ans: \" \" });\n    }\n  };\n  handleAc = () => {\n    this.setState({ text: \"\", ans: \" \" });\n  };\n  handleClear = () => {\n    let str = this.state.text;\n    str = str.substring(0, str.length - 1);\n    this.setState({ text: str, ans: \"\" });\n  };\n  \n\n  render() {\n    return (\n      <div className=\"mainBox\">\n        <div className=\"box\">\n          <div className=\"display\">\n            <div className=\"display1\">{this.state.text}</div>\n            <div className=\"display2\">{this.state.ans}</div>\n          </div>\n          <div className=\"container\">\n            <div className=\"operators-top\">\n              {[\"Ac\",\"c\",\"%\",\"/\"].map((per)=>{\n                return<OperateButton keyboardClicked={()=>this.handleButton(per)} element={per}/>\n              })}\n            </div>\n            <div className=\"numbers\">\n              <div className=\"digits\">\n                <Keyboard buttonFunction={this.handleButton}/>\n              </div>\n              <div className=\"operators-right\">\n              {[\"*\",\"-\",\"+\",\"=\"].map((per)=>{\n                return<OperateButton keyboardClicked={()=>this.handleButton(per)} element={per}/>\n              })}\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// addDecimal = (props) => {\n//   if (this.state.text.indexOf(\".\") === -1) {\n//     this.setState({ text: this.state.text + props });\n//   }\n\n\n//////\n\n// else if(btn === \".\") {\n//   addDecimal = (props) => {\n//     if (this.state.text.indexOf(\".\") === -1) {\n//       this.setState({ text: this.state.text + props });\n//     }\n//   };","import React from \"react\";\r\nimport \"./Keyboard.css\";\r\nimport OperateButton from \"../Button/Button.js\";\r\n\r\nconst numberPad = (props) => {\r\n  let num = [\r\n    [7, 8, 9],\r\n    [4, 5, 6],\r\n    [1, 2, 3],\r\n    [\"00\", 0, \".\"],\r\n  ];\r\n  return (\r\n    <div className=\"wraper\">\r\n      {num.map((row) => {\r\n        return (\r\n          <div className=\"row\">\r\n            {row.map((col) => (\r\n              <OperateButton\r\n                key={col}\r\n                keyboardClicked={() => props.buttonFunction(col)}\r\n                element={col}\r\n              />\r\n            ))}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default numberPad;\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}